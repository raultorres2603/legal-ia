{
	"info": {
		"_postman_id": "validation-edge-cases",
		"name": "Validation & Edge Cases - Legal-IA",
		"description": "Comprehensive testing of validation rules, error handling, and edge cases for AI document generation and traditional document management",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": {
			"major": 2,
			"minor": 0,
			"patch": 0
		}
	},
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:7071",
			"type": "string"
		},
		{
			"key": "invalidUserId",
			"value": "00000000-0000-0000-0000-000000000000",
			"type": "string"
		},
		{
			"key": "invalidDocumentId",
			"value": "99999999-9999-9999-9999-999999999999",
			"type": "string"
		}
	],
	"item": [
		{
			"name": "🤖 AI Generation Validation",
			"item": [
				{
					"name": "Invalid User ID - AI Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid user ID', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions user ID', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('user');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"invalid-user-id\",\n  \"documentType\": 1,\n  \"title\": \"Test Document\",\n  \"userPrompts\": [\"Generate a simple invoice\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/documents/generate",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "generate"]
						}
					},
					"response": []
				},
				{
					"name": "Empty Prompts - AI Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for empty prompts', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions prompts', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('prompt');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"documentType\": 1,\n  \"title\": \"Test Document\",\n  \"userPrompts\": []\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/documents/generate",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "generate"]
						}
					},
					"response": []
				},
				{
					"name": "Too Many Prompts - AI Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for too many prompts', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions maximum prompts', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('maximum');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"documentType\": 1,\n  \"title\": \"Test Document\",\n  \"userPrompts\": [\n    \"Prompt 1\", \"Prompt 2\", \"Prompt 3\", \"Prompt 4\", \"Prompt 5\",\n    \"Prompt 6\", \"Prompt 7\", \"Prompt 8\", \"Prompt 9\", \"Prompt 10\",\n    \"Prompt 11\", \"Prompt 12\"\n  ]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/documents/generate",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "generate"]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Document Type - AI Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid document type', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions document type', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('type');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"documentType\": 999,\n  \"title\": \"Test Document\",\n  \"userPrompts\": [\"Generate a document\"]\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/documents/generate",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "generate"]
						}
					},
					"response": []
				},
				{
					"name": "Regenerate Non-Existent Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 404 for non-existent document', function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});",
									"",
									"pm.test('Error message mentions document not found', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('not found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"documentId\": \"{{invalidDocumentId}}\",\n  \"updatedPrompts\": [\"Update this non-existent document\"],\n  \"reason\": \"Testing error handling\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/documents/{{invalidDocumentId}}/regenerate",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "{{invalidDocumentId}}", "regenerate"]
						}
					},
					"response": []
				},
				{
					"name": "Download Non-Existent Document",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 404 for non-existent document download', function () {",
									"    pm.expect(pm.response.code).to.equal(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ai/documents/{{invalidDocumentId}}/download",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "{{invalidDocumentId}}", "download"]
						}
					},
					"response": []
				},
				{
					"name": "Long Context - AI Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for context too long', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions context length', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('context');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"documentType\": 1,\n  \"title\": \"Test Document\",\n  \"userPrompts\": [\"Generate a document\"],\n  \"additionalContext\": \"This is a very long context that exceeds the maximum allowed length. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris. [... continue for 5000+ characters to test validation ...]\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/documents/generate",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "generate"]
						}
					},
					"response": []
				}
			],
			"description": "Validation and error handling tests for AI document generation endpoints"
		},
		{
			"name": "👥 User Validation",
			"item": [
				{
					"name": "Invalid Spanish DNI",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid DNI', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions DNI format', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('dni');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@email.com\",\n  \"dni\": \"invalid-dni\",\n  \"cif\": \"B12345678\",\n  \"businessName\": \"Test Business\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Spanish CIF",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid CIF', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions CIF format', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('cif');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@email.com\",\n  \"dni\": \"12345678Z\",\n  \"cif\": \"invalid-cif\",\n  \"businessName\": \"Test Business\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Spanish Postal Code",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid postal code', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions postal code', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('postal');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@email.com\",\n  \"dni\": \"12345678Z\",\n  \"cif\": \"B12345678\",\n  \"businessName\": \"Test Business\",\n  \"postalCode\": \"invalid-postal\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Spanish Phone Number",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid phone number', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions phone number', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('phone');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"email\": \"test@email.com\",\n  \"dni\": \"12345678Z\",\n  \"cif\": \"B12345678\",\n  \"businessName\": \"Test Business\",\n  \"phone\": \"invalid-phone\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						}
					},
					"response": []
				},
				{
					"name": "Missing Required Fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for missing required fields', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions required fields', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('required');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"\",\n  \"lastName\": \"\",\n  \"email\": \"invalid-email\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/users",
							"host": ["{{baseUrl}}"],
							"path": ["api", "users"]
						}
					},
					"response": []
				}
			],
			"description": "Validation tests for Spanish user data including DNI, CIF, postal codes, and phone numbers"
		},
		{
			"name": "📄 Document Validation",
			"item": [
				{
					"name": "Invalid Quarter Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid quarter', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions quarter range', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('quarter');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"title\": \"Test Document\",\n  \"type\": 1,\n  \"quarter\": 5,\n  \"year\": 2025\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents"]
						}
					},
					"response": []
				},
				{
					"name": "Invalid Year Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for invalid year', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions year range', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('year');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"title\": \"Test Document\",\n  \"type\": 1,\n  \"quarter\": 1,\n  \"year\": 1999\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents"]
						}
					},
					"response": []
				},
				{
					"name": "Negative Amount Value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for negative amount', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions amount value', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('amount');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"title\": \"Test Document\",\n  \"type\": 1,\n  \"amount\": -100.00\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents"]
						}
					},
					"response": []
				},
				{
					"name": "Title Too Long",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should return 400 for title too long', function () {",
									"    pm.expect(pm.response.code).to.equal(400);",
									"});",
									"",
									"pm.test('Error message mentions title length', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.include('title');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"title\": \"This is a very long title that exceeds the maximum allowed length of 200 characters. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n  \"type\": 1\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents"]
						}
					},
					"response": []
				}
			],
			"description": "Validation tests for document data including business rules and field constraints"
		},
		{
			"name": "🔍 Search & Filter Edge Cases",
			"item": [
				{
					"name": "Empty Search Term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should handle empty search gracefully', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/documents/search?term=",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents", "search"],
							"query": [
								{
									"key": "term",
									"value": ""
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Very Long Search Term",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should handle long search term', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/documents/search?term=this-is-a-very-long-search-term-that-might-cause-issues-with-database-queries-lorem-ipsum-dolor-sit-amet-consectetur-adipiscing-elit",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents", "search"],
							"query": [
								{
									"key": "term",
									"value": "this-is-a-very-long-search-term-that-might-cause-issues-with-database-queries-lorem-ipsum-dolor-sit-amet-consectetur-adipiscing-elit"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Special Characters in Search",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should handle special characters', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/documents/search?term=%3Cscript%3Ealert('xss')%3C/script%3E",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents", "search"],
							"query": [
								{
									"key": "term",
									"value": "%3Cscript%3Ealert('xss')%3C/script%3E"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "SQL Injection Attempt",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should prevent SQL injection', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
									"});",
									"",
									"pm.test('Should not return error containing SQL', function () {",
									"    const responseText = pm.response.text();",
									"    pm.expect(responseText.toLowerCase()).to.not.include('sql');",
									"    pm.expect(responseText.toLowerCase()).to.not.include('syntax');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/documents/search?term=' OR '1'='1' --",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents", "search"],
							"query": [
								{
									"key": "term",
									"value": "' OR '1'='1' --"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Edge cases for search functionality including security testing"
		},
		{
			"name": "🚀 Performance & Load Tests",
			"item": [
				{
					"name": "Bulk Document Creation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should handle bulk operations efficiently', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(10000);",
									"});",
									"",
									"pm.test('Should return success for valid bulk request', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"title\": \"Performance Test Document\",\n  \"type\": 1,\n  \"description\": \"Document created for performance testing with realistic data size and complexity to simulate real-world usage patterns.\",\n  \"content\": \"This is a test document with substantial content to test performance under realistic conditions. Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\",\n  \"tags\": \"performance, testing, bulk, load-test, stress-test\",\n  \"amount\": 1000.00,\n  \"currency\": \"EUR\",\n  \"quarter\": 1,\n  \"year\": 2025\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/documents",
							"host": ["{{baseUrl}}"],
							"path": ["api", "documents"]
						}
					},
					"response": []
				},
				{
					"name": "Concurrent AI Generation",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Should handle concurrent AI requests', function () {",
									"    pm.expect(pm.response.responseTime).to.be.below(15000);",
									"});",
									"",
									"pm.test('Should return appropriate response for AI generation', function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 429, 503]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"userId\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"documentType\": 1,\n  \"title\": \"Concurrent AI Test\",\n  \"userPrompts\": [\n    \"Generate a comprehensive invoice for performance testing\",\n    \"Include all required Spanish tax information\",\n    \"Add detailed service descriptions and calculations\",\n    \"Apply proper formatting and legal compliance\"\n  ],\n  \"additionalContext\": \"This is a performance test for concurrent AI document generation to ensure the system can handle multiple simultaneous requests efficiently.\",\n  \"amount\": 2500.00,\n  \"currency\": \"EUR\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/ai/documents/generate",
							"host": ["{{baseUrl}}"],
							"path": ["ai", "documents", "generate"]
						}
					},
					"response": []
				}
			],
			"description": "Performance and load testing scenarios to ensure system reliability under stress"
		}
	],
	"auth": {
		"type": "noauth"
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request validation testing setup",
					"console.log('Testing validation for:', pm.info.requestName);",
					"pm.globals.set('testStartTime', Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global validation test assertions",
					"const testDuration = Date.now() - pm.globals.get('testStartTime');",
					"console.log('Test completed in:', testDuration, 'ms');",
					"",
					"// Ensure all responses are properly formatted",
					"pm.test('Response has proper content type', function () {",
					"    const contentType = pm.response.headers.get('Content-Type');",
					"    if (contentType) {",
					"        pm.expect(contentType).to.include('application/json').or.include('text/plain');",
					"    }",
					"});",
					"",
					"// Security test - ensure no sensitive data in error responses",
					"if (pm.response.code >= 400) {",
					"    pm.test('Error response does not contain sensitive data', function () {",
					"        const responseText = pm.response.text().toLowerCase();",
					"        pm.expect(responseText).to.not.include('password');",
					"        pm.expect(responseText).to.not.include('secret');",
					"        pm.expect(responseText).to.not.include('token');",
					"        pm.expect(responseText).to.not.include('connection string');",
					"    });",
					"}"
				]
			}
		}
	]
}

